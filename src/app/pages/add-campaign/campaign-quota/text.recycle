import { Component, Input, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { options } from './campaign-quota.data';
import { QuotaService } from './campaign-quota.service';

@Component({
  selector: 'app-campaign-quota',
  templateUrl: './campaign-quota.component.html',
  styleUrls: ['./campaign-quota.component.css'],
  providers: [
    QuotaService
  ]
})
export class CampaignQuotaComponent implements OnInit {
  
  // Ouota Input Options
  options = options

  @Input() duration: {
    start: Date,
    stop: Date
  } = {
    start: null as any,
    stop: null as any,
  }
  
  quota: {
    type: number,
    total: number,
    separate: number,
    period: number,
    days: number,
    mobile: number,
    fbb: number,
  } = {
    type: 0,
    total: 0,
    separate: 0,
    period: 0,
    days: 0,
    mobile: 0,
    fbb: 0,
  }

  quotaNotice: {
    email: number,
    sms: number,
    inputEmail: string,
    inputPhone: string,
    listEmail: string[],
    listPhone: string[],
  } = {
    email: 0,
    sms: 0,
    inputEmail: '',
    inputPhone: '',
    listEmail: [
      'arnonkon@ais.co.th'
    ],
    listPhone: [
      '0939604144',
      '66939604144'
    ],
  }

  quotaList: {
    begin: Date,
    end: Date,
  }[][] = []

  constructor(
    private router: Router,
    private quotaService: QuotaService
  ) { }

  ngOnInit(): void {
    // Initialize
    console.log('Init', this.router.url)
    // TODO: Mockup Campaign Duration
    this.duration = {
      start: new Date('2022-01-01'),
      stop: new Date('2024-05-01'),
    }
  }

  goto (path: string) {
    this.router.navigateByUrl(path)
  }

  existingPhone (phone: string): boolean {
    // Get number without prefix
    let removePrefix = (input: string) => input.substring(
      input.length - 9, input.length
    )
    // Check duplicate
    return this.quotaNotice.listPhone.every(
      e => removePrefix(e) != removePrefix(phone)
    )
  }

  existingEmail (email: string): boolean {
    return this.quotaNotice.listEmail.every(
      e => e != email
    )
  }

  addNoticeEmail(): void {
    // Email input value
    let email = this.quotaNotice.inputEmail
    let validate = this.quotaService.isEmail(email)
    let unique = this.existingEmail(email)
    // Verify Email
    if (validate && unique) {
      // Add email
      this.quotaNotice.listEmail.push(email)
      this.quotaNotice.inputEmail = ''
    }
    else {
      alert(
        `${!!email ? email : 'Email is empty'} | ${validate} | ${unique}`
      )
    }
  }
  
  removeNoticeEmail(index: number) {
    // Notice email list
    let list = this.quotaNotice.listEmail
    // Remove data
    this.quotaNotice.listEmail = list.filter(
      (_, i) => i != index
    )
  }

  addNoticeSMS(): void {
    // Mobile number input value
    let phone = this.quotaNotice.inputPhone
    let validate = this.quotaService.isPhone(phone)
    let unique = this.existingPhone(phone)
    // Verify mobile number
    if (validate && unique) {
      // Add mobile number
      this.quotaNotice.listPhone.push(phone)
      this.quotaNotice.inputPhone = ''
    }
    else {
      alert(
        `${!!phone ? phone : 'Phone is empty'} | ${validate} | ${unique}`
      )
    }
  }

  removeNoticeSMS(index: number) {
    // Notice phone number list
    let list = this.quotaNotice.listPhone
    // Remove data
    this.quotaNotice.listPhone = list.filter(
      (_, i) => i != index
    )
  }

  selectQuotaType (type: number): void {
    // Set quota
    this.quota.type = type
    this.setQuota(
      this.quota.type,
      this.quota.period
    )
  }

  selectQuotaPeriod (period: number): void {
    // Set quota
    this.quota.period = period
    this.setQuota(
      this.quota.type,
      this.quota.period
    )
  }

  setQuota (type: number, period: number): void {
    // Campaign duration
    let { start, stop } = this.duration
    // Quota limit
    let { mobile, fbb } = this.quota
    
    console.log(type, period)
    //
    let check = [
      [1,2,3].some(e => e == type),
      [1,2].some(e => e == period)
    ]
    // Filter quota inspection type
    if (check.every(e => !!e)) {
      //
      let range = period == 3 ? 'half-month' : 'full-month'
      // 
      this.quotaList = []
      // 
      let list = this.quotaService.setPeriod(
        range, start, stop
      )
      // 
      if (type == 1) {
        this.quotaList.push(list)
      }
      console.log(this.quotaList)
    }
  }

}

<!-- Quota: Limit -->
<p class="label">
  Quota Separation
</p>
<div class="grid-layout slot-2">
  <div
    class="item"
    *ngFor="let separate of options.quotaSeparate"
    [ngClass]="{
      'active': separate.value == quota.separate
    }"
    (click)="quota.separate = separate.value">
    {{ separate.name }}
  </div>
</div>
<div class="grid-layout" [ngClass]="{
  'slot': quota.separate == 0,
  'slot-2': quota.separate == 1
}">
  <div>
    <p class="label">
      Mobile Quota
    </p>
    <input
      [(ngModel)]="quota.mobile"
      placeholder="Mobile quota count">
  </div>
  <div
    *ngIf="quota.separate == 1">
    <p class="label">
      FBB Quota
    </p>
    <input
      [(ngModel)]="quota.fbb"
      placeholder="FBB quota count">
  </div>
</div>

<p> 
  Type {{ quota.type }}, Period {{ quota.period }} <br/>
</p>
<ul>
  <li>
    if type = 1 && period = 0
    <ul>
      <li>show overall quota mobile/fibre</li>
      <li>hide allocate list</li>
    </ul>
  </li>
  <li>
    if type = 1 && period = 1
    <ul>
      <li>hide overall quota mobile/fibre</li>
      <li>show allocate list with action</li>
    </ul>
  </li>
  <li>
    if type = 2,3 && period = 0 
    <ul>
      <li>show overall quota mobile</li>
      <li>show allocate list without action</li>
    </ul>
  </li>
  <li>
    if type = 2,3 && period = 1,2 
    <ul>
      <li>hide overall quota mobile</li>
      <li>show allocate list with action</li>
    </ul>
  </li>
</ul>
  <div class="text center">
    <!-- Overall Campaign -->
    <div *ngIf="quota.type == 1 && (quota.period == 0 || quota.period == 3)">
      config overall
    </div>
    <!-- Monthly & Haft-Monthly - Campaign  -->
    <div *ngIf="quota.type == 1 && (quota.period == 1 || quota.period == 2)">
      config total each period
    </div>
    <!-- Overall - Choice & Criteria  -->
    <div *ngIf="(quota.type == 2 || quota.type == 3) && (quota.period == 0 || quota.period == 3)">
      choice/criteria each config total
    </div>
    <!-- Monthly & Haft-Monthly - Choice & Criteria  -->
    <div *ngIf="(quota.type == 2 || quota.type == 3) && (quota.period == 1 || quota.period == 2)">
      choice/criteria each config total average to each period
    </div>
  </div>

  <!-- Main Component -->
<div class="container">
  <div class="text left">
    <button (click)="goto('/dashboard/add-campaign/limitation')">
      Back
    </button>
  </div>
  <h1 class="heading text center">
    Quota Allocation
  </h1>
  <div class="campaign-quota">
    <!-- Quota: Inspection Period -->
    <p class="title text uppercase">
      Inspect Type
    </p>
    <hr>
    <div class="grid-layout slot-5">
      <div
        class="item"
        *ngFor="let type of options.quota"
        [ngClass]="{
          'active': type.value == quota.type
        }"
        (click)="selectQuotaType(type.value)">
        ({{type.value}}) {{ type.name }}
      </div>
    </div>
    <div
      *ngIf="
        quota.type == 1 ||
        quota.type == 2 ||
        quota.type == 3 
      ">
      <p class="title text uppercase">
        Inspect Period
      </p>
      <hr>
      <div class="grid-layout slot-4">
        <div
          class="item"
          *ngFor="let period of options.quotaPeriod"
          [ngClass]="{
            'active': period.value == quota.period
          }"
          (click)="
            selectQuotaPeriod(period.value)
          ">
          ({{period.value}}) {{ period.name }}
        </div>
      </div>
      <div
        *ngIf="quota.period == 3">
        <p class="label">
          Days Count
        </p>
        <input
          [(ngModel)]="quota.days"
          placeholder="Quota validate days count">
      </div>
      <p class="title text uppercase">
        Quota Split
      </p>
      <p class="text uppercase"
        [ngStyle]="{
          margin: '.5em 0'
        }">
        Mobile & Fibre
      </p>
      <hr>
      <div class="grid-layout slot-2">
        <div
          class="item"
          *ngFor="let split of options.quotaSplit"
          [ngClass]="{
            'active': quota.split == split.value
          }"
          (click)="
            quota.split = split.value
          ">
          {{ split.name }}
        </div>
      </div>
      <div class="grid-layout"
        *ngIf="(
          quota.type == 1 && (
            quota.period == 0 ||
            quota.period == 3
          )
        )"
        [ngClass]="{
          'slot-1': quota.split == 0,
          'slot-2': quota.split == 1
        }">
        <div>
          <p class="label">
            Mobile Quota
          </p>
          <input
            [(ngModel)]="quota.mobile"
            (keyup)="changeOverall('mobile')"
            placeholder="Mobile Quota">
        </div>
        <div *ngIf="quota.split == 1">
          <p class="label">
            Fibre Quota
          </p>
          <input
            [(ngModel)]="quota.fibre"
            (keyup)="changeOverall('fibre')"
            placeholder="Fibre Quota">
        </div>
      </div>
      <div 
        *ngIf="
          (quota.type != 1) || 
          (quota.type == 1 &&
            (
              quota.period == 1 ||
              quota.period == 2
            )
          )
        ">
        <p class="title text uppercase">
          Quota List
        </p>
        <br />
        <div form="list"
          class="quota-list list-allocate">
          <div *ngFor="
            let key of allocateKeys, index as i
          ">
            <div class="item"
              [ngClass]="{
                'mobile-only':
                  quota.split == 0,
                'mobile-fibre':
                  quota.split == 1
              }">
              <div item="avatar">
                <div class="image">
                  <b> {{ i + 1 }} </b>
                </div>
              </div>
              <div item="content">
                <div>
                  <p class="label">
                    Name
                  </p>
                  {{ allocateList[key].name }}
                </div>
              </div>
              <div item="mobile">
                <p class="label">
                  Mobile
                </p>
                {{ allocateList[key].mobile }}
              </div>
              <div item="fibre">
                <p class="label">
                  Fibre
                </p>
                {{ allocateList[key].fibre }}
              </div>
              <div item="action">
                <button (click)="openAllocate(key)">
                  Allocate
                </button>
              </div>
            </div>
            <hr *ngIf="(i + 1) !== allocateKeys.length" />
          </div>
        </div>
      </div>
      <p class="title text uppercase">
        Email Notification
      </p>
      <hr>
      <div class="grid-layout slot-2">
        <div
          class="item"
          *ngFor="let notice of options.quotaNotice"
          [ngClass]="{
            'active': notice.value == quotaNotice.email
          }"
          (click)="
            quotaNotice.email = notice.value
          ">
          {{ notice.name }}
        </div>
      </div>
      <div
        *ngIf="quotaNotice.email == 1">
        <p class="label">
          Emails
        </p>
        <div class="input-action">
          <input
            [(ngModel)]="quotaNotice.inputEmail"
            placeholder="Input email">
          <button
            (click)="addNoticeEmail()">
            Add
          </button>
        </div>
        <div *ngIf="quotaNotice.listEmail.length > 0">
          <br>
          <div class="tag-list notice">
            <div 
              class="item input-action"
              *ngFor="
                let email of quotaNotice.listEmail, index as i
              ">
              <span class="content">
                {{ email }}
              </span>
              <span class="remove" (click)="
                removeNoticeEmail(i)
              "> X </span>
            </div>
          </div>
        </div>
      </div>
      <p class="title text uppercase">
        SMS Notification
      </p>
      <hr>
      <div class="grid-layout slot-2">
        <div
          class="item"
          *ngFor="let notice of options.quotaNotice"
          [ngClass]="{
            'active': notice.value == quotaNotice.sms
          }"
          (click)="
            quotaNotice.sms = notice.value
          ">
          {{ notice.name }}
        </div>
      </div>
      <div
        *ngIf="quotaNotice.sms == 1">
        <p class="label">
          Mobile Phone Number
        </p>
        <div class="input-action">
          <input
            [(ngModel)]="quotaNotice.inputPhone"
            placeholder="Input mobile phone number">
          <button
            (click)="addNoticeSMS()">
            Add
          </button>
        </div>
        <div *ngIf="quotaNotice.listPhone.length > 0">
          <br>
          <div class="tag-list notice">
            <div 
              class="item input-action"
              *ngFor="
                let phone of quotaNotice.listPhone, index as i
              ">
              <span class="content">
                {{ phone }}
              </span>
              <span class="remove" (click)="
                removeNoticeSMS(i)
              "> X </span>
            </div>
          </div>
        </div>
      </div>
    </div>
    <br end="campaign-quota">
  </div>

  <div class="container-footer">
    <button (click)="
      goto('/dashboard/add-campaign/limitation')
    ">
      Back
    </button>
    <button (click)="
      goto('/dashboard/add-campaign/response')
    ">
      {{ quota.type == 0 ? 'Skip' : 'Next' }}
    </button>
  </div>
</div>
<!-- Allocate Modal -->
<app-modal [display]="manage.modal">
  <div body class="dialog">
    <div dialog="header">
      <p class="title text uppercase">
        Allocate Quota 
      </p>
      <hr />
      <h5 class="sub-title">
        ({{ manage.id }}) {{ manage.title }} 
      </h5>
      <div *ngIf="!!allocateList[manage.id]">
        <div class="grid-layout" [ngClass]="{
          'slot-1': quota.split == 0,
          'slot-2': quota.split == 1
        }">
          <div>
            <p class="label">
              Total Mobile Quota
            </p>
            <input
              [(ngModel)]="
                allocateList[manage.id].mobile
              "
              (keyup)="averagePeriodQuota(
                manage.id, 'mobile'
              )"
              placeholder="Mobile Quota">
          </div>
          <div *ngIf="quota.split == 1">
            <p class="label">
              Total Fibre Quota
            </p>
            <input
              [(ngModel)]="
                allocateList[manage.id].fibre
              "
              (keyup)="averagePeriodQuota(
                manage.id, 'fibre'
              )"
              placeholder="Fibre Quota">
          </div>
        </div>
      </div>
    </div>
    <div dialog="content" 
      *ngIf="
        !!allocateList[manage.id] && (
          quota.period == 1 ||
          quota.period == 2
        )
      ">
      <div form="list"
        class="quota-list list-manage">
        <p> {{ manage.id }} </p>
        <pre>
          {{ allocateList[manage.id].period | json }}
        </pre>
        <div class="quota-list"
          *ngFor="
            let period of allocateList[manage.id].period, index as i
          ">
          <div class="item no-action"
            [ngClass]="{
              'mobile-only':
                quota.split == 0,
              'mobile-fibre':
                quota.split == 1
            }">
            <div item="avatar">
              <div class="image">
                <b> {{ i + 1 }} </b>
              </div>
            </div>
            <div item="content"
              class="text center">
              <div>
                <p class="label">
                  From
                </p>
                <span>
                  {{ period.start | date }}
                </span>
              </div>
              <div>
                <p class="label">
                  To
                </p>
                <span>
                  {{ period.stop | date }}
                </span>
              </div>
            </div>
            <div item="mobile">
              <p class="label">
                Mobile {{ manage.id }} {{ i }}
              </p>
              <input
                [(ngModel)]="
                  allocateList[manage.id].period[i].mobile
                "
                (keyup)="changePeriodQuota(
                  manage.id, i, 'mobile'
                )"
                placeholder="Mobile Quota"
              />
            </div>
            <div item="fibre">
              <p class="label">
                Fibre
              </p>
              <input
                [(ngModel)]="
                  allocateList[manage.id].period[i].fibre
                "
                (keyup)="changePeriodQuota(
                  manage.id, i, 'fibre'
                )"
                placeholder="Fibre Quota"
              />
            </div>
          </div>
          <hr *ngIf="
            (i + 1) !== allocateList[manage.id].period.length"
          />
        </div>
      </div>
      <div *ngIf="!allocateList[manage.id]">
        Quota Not Found
      </div>
    </div>
    <div dialog="footer">
      <div class="text center">
        <button (click)="closeAllocate()">save</button>
      </div>
    </div>
  </div>
</app-modal>

import { Component, Input, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { options } from './campaign-quota.data';
import { QuotaService } from './campaign-quota.service';

@Component({
  selector: 'app-campaign-quota',
  templateUrl: './campaign-quota.component.html',
  styleUrls: ['./campaign-quota.component.css'],
  providers: [
    QuotaService
  ]
})
export class CampaignQuotaComponent implements OnInit {
  
  // Ouota Input Options
  options = options

  @Input() duration: {
    start: Date,
    stop: Date
  } = {
    start: null as any,
    stop: null as any,
  }
  
  chioceList: {
    id: number, 
    name: string
  }[] = []
  
  criteriaList: {
    id: number,
    name: string
  }[] = []

  quota: {
    type: number,
    period: number,
    split: number,
    days: number,
    mobile: number,
    fibre: number
  } = {
    type: 0,
    period: 0,
    split: 0,
    days: 0,
    mobile: 0,
    fibre: 0
  }

  quotaNotice: {
    email: number,
    sms: number,
    inputEmail: string,
    inputPhone: string,
    listEmail: string[],
    listPhone: string[],
  } = {
    email: 0,
    sms: 0,
    inputEmail: '',
    inputPhone: '',
    listEmail: [
      'arnonkon@ais.co.th'
    ],
    listPhone: [
      '0939604144',
      '66939604144'
    ],
  }

  manage: {
    modal: boolean,
    id: number | string,
    title: string
  } = {
    modal: false,
    id: 0,
    title: ''
  }

  allocateKeys: string[] = []
  allocateList: {
    [key: string]: {
      id: number,
      name: string,
      mobile: number,
      fibre: number,
      period: {
        start: Date,
        stop: Date,
        mobile: number
        fibre: number
      }[],
    }
  } = {}

  allocateQuota: {
    mobile: number
    fibre: number
  }[] = []

  constructor(
    private router: Router,
    private quotaService: QuotaService
  ) { }

  ngOnInit(): void {
    // Initialize
    console.log('Init', this.router.url)
    // TODO: Campaign Duration
    this.duration = {
      start: new Date('2022-01-15 00:00:00'),
      stop: new Date('2022-05-01 00:01:00'),
    }
    // TODO: Choice & Criteria
    this.chioceList = this.quotaService.fetchChoice(10)
    this.criteriaList = this.quotaService.fetchCriteria(5)
    //
    this.selectQuotaType(2)
  }

  goto (path: string) {
    this.router.navigateByUrl(path)
  }

  existingPhone (phone: string): boolean {
    // Get number without prefix
    let removePrefix = (input: string) => input.substring(
      input.length - 9, input.length
    )
    // Check duplicate
    return this.quotaNotice.listPhone.every(
      e => removePrefix(e) != removePrefix(phone)
    )
  }

  existingEmail (email: string): boolean {
    return this.quotaNotice.listEmail.every(
      e => e != email
    )
  }

  addNoticeEmail(): void {
    // Email input value
    let email = this.quotaNotice.inputEmail
    let validate = this.quotaService.isEmail(email)
    let unique = this.existingEmail(email)
    // Verify Email
    if (validate && unique) {
      // Add email
      this.quotaNotice.listEmail.push(email)
      this.quotaNotice.inputEmail = ''
    }
    else {
      alert(
        `${!!email ? email : 'Email is empty'} | ${validate} | ${unique}`
      )
    }
  }
  
  removeNoticeEmail(index: number) {
    // Notice email list
    let list = this.quotaNotice.listEmail
    // Remove data
    this.quotaNotice.listEmail = list.filter(
      (_, i) => i != index
    )
  }

  addNoticeSMS(): void {
    // Mobile number input value
    let phone = this.quotaNotice.inputPhone
    let validate = this.quotaService.isPhone(phone)
    let unique = this.existingPhone(phone)
    // Verify mobile number
    if (validate && unique) {
      // Add mobile number
      this.quotaNotice.listPhone.push(phone)
      this.quotaNotice.inputPhone = ''
    }
    else {
      alert(
        `${!!phone ? phone : 'Phone is empty'} | ${validate} | ${unique}`
      )
    }
  }

  removeNoticeSMS(index: number) {
    // Notice phone number list
    let list = this.quotaNotice.listPhone
    // Remove data
    this.quotaNotice.listPhone = list.filter(
      (_, i) => i != index
    )
  }

  selectQuotaType (type: number): void {
    // Change Type
    if (this.quota.type != type) {
      // Set quota
      this.quota.type = type
      this.resetQuota()
      this.setQuota(
        this.quota.type,
        this.quota.period
      )
    }
  }

  selectQuotaPeriod (period: number): void {
    // Change Period
    if (this.quota.period != period) {
      // Set quota
      this.quota.period = period
      this.resetQuota()
      this.setQuota(
        this.quota.type,
        this.quota.period
      )
    }
  }

  resetQuota () {
    console.log('reset')
    this.quota.days = 0
    this.quota.mobile = 0
    this.quota.fibre = 0
  }

  setQuota (
    inspectType: number,
    periodType: number
  ): void {
    // Define Variable(s)
    let list = {} as any
    let total = {
      mobile: 0, fibre: 0,
    }
    // Campaign Period
    let period = this.quotaService
      .setPeriod(
        periodType, 
        this.duration.start,
        this.duration.stop
      )
      .map(date => ({
        ...date, ...total
      }))
    // Filter Inspect Type
    switch (inspectType) {
      // Overall Campaign
      case 1:
        // Default
        let id = 0
        let name = 'Campaign Overall'
        // Allocate List
        list['overall'] = { 
          id, name, ...total, period
        }
        break;
      // Choice & Criteria
      case 2:
      case 3:
        // Inspect List
        let inspectList = inspectType == 2
          ? this.chioceList
          : this.criteriaList
        // Allocate List
        inspectList.forEach(
          ({id, name}) => list[id] = { 
            id, name, ...total, period
          }
        )
        break;
      default: break;
    }
    // Keys
    let keys = Object.keys(list)
    // Setup Allocate Data
    this.allocateKeys = keys
    this.allocateList = list
  }

  openAllocate (id: string) {
    // Check Quota
    if (!!this.allocateList[id]) {
      // Define variable(s)
      let { name, period } = this.allocateList[id]
      // Setup Modal
      this.manage.modal = true
      this.manage.id = id
      this.manage.title = `${name}`
    }
    else {
      alert(`Quota ID ${id} Not Found`)
    }
  }

  closeAllocate () {
    // Reset Modal
    this.manage.modal = false
    this.manage.id = null as any
    this.manage.title = ``
  }

  changeOverall (quota: string) {
    switch (quota) {
      case 'mobile':
      case 'fibre':
        // Quota
        let { [quota]: overall } = this.quota
        overall = !overall ? 0 : overall * 1
        // Access Allocate with key
        this.allocateKeys.forEach(key => {
          // Allocate List
          let allocate = this.allocateList[key]
          // Update Allocate Quota
          allocate[quota] = overall
          allocate.period.forEach(
            period => period[quota] = overall
          )
        })
        break;
      default: break;
    }
  }

  changePeriodQuota (
    key: number | string,
    index: number,
    quota: string
  ) {
    this.allocateKeys.forEach(key => {
      console.log(`key-${key}`, this.allocateList[key].period)
    })
    if (!!this.allocateList[key]) {
      // // Check Quota Type
      // if (
      //   quota == 'mobile' ||
      //   quota == 'fibre'
      // ) {
      //   // Period Quota Summary
      //   let total = this.allocateQuota
      //     .reduce(
      //       (prev, curr) => prev + (curr[quota]  * 1), 0
      //     )
      //   // Set Quota State
      //   this.quota[quota] = total
      //   this.allocateList[key][quota] = total
      // }
    }
  }

  averagePeriodQuota (
    key: number | string,
    quota: string
  ) {
    // Check Existing Item
    if (!!this.allocateList[key]) {
      // Filter Quota Type
      switch (quota) {
        case 'fibre':
        case 'mobile':
          // Allocate Data
          let allocate = this.allocateList[key]
          let total = allocate[quota] * 1
          let divisor = allocate.period.length
          // Set Overall
          this.quota[quota] = total
          // Calculate Average
          let average = this.quotaService.averageQuota(
            total, divisor
          )
          .forEach((e, i) => {
            console.log(e, i)
          })
          // Average Quota
          
          // this.allocateList[key].period.forEach()
          // this.allocateQuota.forEach(
          //   (num, i) => {
          //     num[quota] = average[i]
              
          //   }
          // )
          break;
        default: break;
      }
    }
    else {
      console.warn(`Quota List ID: ${key} Not Found`)
    }
  }
}
